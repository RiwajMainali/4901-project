{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar MyButton = function MyButton(props) {\n  var scaleValue = new Animated.Value(0);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isPressed = _useState2[0],\n    setIsPressed = _useState2[1];\n  var buttonPressed = function buttonPressed() {\n    setIsPressed(true);\n    Animated.spring(scaleValue, {\n      toValue: 1,\n      friction: 3,\n      tension: 40,\n      useNativeDriver: false\n    }).start(function () {\n      setIsPressed(false);\n    });\n  };\n  console.log(\"Test\");\n  var scaleStyle = {\n    transform: [{\n      scale: scaleValue\n    }]\n  };\n  return _jsx(View, {\n    style: {\n      alignItems: 'center'\n    },\n    children: _jsx(Animated.View, {\n      style: scaleStyle,\n      children: _jsx(TouchableOpacity, {\n        onPress: buttonPressed,\n        children: _jsx(Text, {\n          style: {\n            color: '#841584'\n          },\n          children: \"Press me\"\n        })\n      })\n    })\n  });\n};\nexport default MyButton;","map":{"version":3,"names":["React","useState","MyButton","props","scaleValue","Animated","Value","isPressed","setIsPressed","buttonPressed","spring","toValue","friction","tension","useNativeDriver","start","console","log","scaleStyle","transform","scale","alignItems","color"],"sources":["H:/inVintori/in.Vintori/components/PopButton.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Button, View, Text, Animated } from 'react-native';\r\nimport { useState } from 'react';\r\n\r\ninterface MyButtonProps {\r\n    // Add any props that your component needs here\r\n}\r\n\r\nconst MyButton: React.FC<MyButtonProps> = (props) => {\r\n    const scaleValue = new Animated.Value(0);\r\n\r\n    const [isPressed, setIsPressed] = useState(false);\r\n\r\n    const buttonPressed = () => {\r\n        setIsPressed(true);\r\n\r\n        // Animate the scale value\r\n        Animated.spring(scaleValue, {\r\n            toValue: 1,\r\n            friction: 3,\r\n            tension: 40,\r\n            useNativeDriver: false,\r\n        }).start(() => {\r\n            setIsPressed(false);\r\n        });\r\n    }\r\n\r\n    console.log(\"Test\")\r\n\r\n    // Use the scale value to animate the button's transform style\r\n    const scaleStyle = {\r\n        transform: [\r\n            { scale: scaleValue }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <View style={{ alignItems: 'center' }}>\r\n            <Animated.View style={scaleStyle}>\r\n                <TouchableOpacity onPress={buttonPressed}>\r\n                    <Text style={{ color: '#841584' }}>Press me</Text>\r\n                </TouchableOpacity>\r\n            </Animated.View>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default MyButton;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAE/B,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAMjC,IAAMC,QAAiC,GAAG,SAApCA,QAAiC,CAAIC,KAAK,EAAK;EACjD,IAAMC,UAAU,GAAG,IAAIC,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;EAExC,gBAAkCL,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CM,SAAS;IAAEC,YAAY;EAE9B,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;IACxBD,YAAY,CAAC,IAAI,CAAC;IAGlBH,QAAQ,CAACK,MAAM,CAACN,UAAU,EAAE;MACxBO,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,CAAC;MACXC,OAAO,EAAE,EAAE;MACXC,eAAe,EAAE;IACrB,CAAC,CAAC,CAACC,KAAK,CAAC,YAAM;MACXP,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACN,CAAC;EAEDQ,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EAGnB,IAAMC,UAAU,GAAG;IACfC,SAAS,EAAE,CACP;MAAEC,KAAK,EAAEhB;IAAW,CAAC;EAE7B,CAAC;EAED,OACI,KAAC,IAAI;IAAC,KAAK,EAAE;MAAEiB,UAAU,EAAE;IAAS,CAAE;IAAA,UAClC,KAAC,QAAQ,CAAC,IAAI;MAAC,KAAK,EAAEH,UAAW;MAAA,UAC7B,KAAC,gBAAgB;QAAC,OAAO,EAAET,aAAc;QAAA,UACrC,KAAC,IAAI;UAAC,KAAK,EAAE;YAAEa,KAAK,EAAE;UAAU,CAAE;UAAA,UAAC;QAAQ;MAAO;IACnC;EACP,EACb;AAEf,CAAC;AAED,eAAepB,QAAQ"},"metadata":{},"sourceType":"module"}